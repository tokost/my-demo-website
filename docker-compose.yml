version: '3.9'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web4${COMPOSE_PROJECT_NAME}
    command: sh -c "gunicorn mywebsite.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/code
      - static_volume:/code/staticfiles
      - media_volume:/code/mediafiles
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      DEBUG: ${DEBUG}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    depends_on:
      - db
    networks:
      - backend  

  db:
    image: postgres:latest
    container_name: db4${COMPOSE_PROJECT_NAME}
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "$POSTGRES_USER" ]
            interval: 30s
            timeout: 10s
            retries: 10      
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d/
      - my-demo-website-develop_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_DB_HOST: db  # Use service name of the database container
      PGADMIN_DB_PORT: 5432  # Use the port exposed by the database container
    ports:
      - "8080:80"
    depends_on:
      - db
    volumes:
      - my-demo-website-develop_pgadmin_data:/var/lib/pgadmin  # uchova data ale bez IP
    networks:
      - backend


  nginx:
    image: nginx:latest
    ports:
      - "8088:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - my-demo-website-develop_static:/code/static  # pridane kvoli statickym suborom
    depends_on:
      - web
    networks:
      - backend

networks:
  backend:
    
volumes:
  my-demo-website-develop_postgres_data:
  my-demo-website-develop_pgadmin_data:
  my-demo-website-develop_static:
  static_volume:
  media_volume:
